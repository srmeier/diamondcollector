"Multiplayer diamond collector"
- make some C executables

/* PlayerState
0x00 = offline
0x00 < online
0x03 > idle
0x03 = moving up
0x04 = moving down
0x05 = moving left
0x06 = moving right
0x07 = mining up
0x08 = mining down
0x09 = mining left
0x0A = mining right

// internal server states (easy way to log errors in future)
0xFE = account doesn't exist
0xFF = incorrect password
*/

- states other than 0x00, 0x01, or 0x02 are considered "dirty" and the server
	needs to send out packets of the state type and set the state back to 0x01
	the true idle state
- idle 0x01 is true idle, idle 0x02 is waiting for interaction reply
- check for changes in player state and send it out across the network
- when a player gets a message about a change to player state the client
	queues the changes and handles them
- once the server sends out the update then the player's state is set to idle
- the clients will set the other players to idle after the state is processed

/* InteractionType
0x00 = none
0x01 = mining
*/

/*
login
- sets player to "idle" status and sends it out
logout
- sets player to "offline" status and sends it out

getX
- returns the horizontal grid index
getY
- returns the vertical grid index
getNode
- returns overworld node index
getDiamondCount
- returns the number of diamonds collected

moveUp
- check player state
- checks if move is valid
- checks if accept/decline is needed else
- sets the player's Y index minus one and sends it out
moveDown
- check player state
- checks if move is valid
- checks if accept/decline is needed else
- sets the player's Y index plus one and sends it out
moveLeft
- check player state
- checks if move is valid
- checks if accept/decline is needed else
- sets the player's X index minus one and sends it out
moveRight
- check player state
- checks if move is valid
- checks if accept/decline is needed else
- sets the player's X index plus one and sends it out

accept
- if the player bumps against an interactive object then
- send out the type of interaction request
- this is the reply from the client after getting the interaction request
- if accepted then the server sets and sends out the state
decline
- if the player bumps against an interactive object then
- send out the type of interaction request
- this is the reply from the client after getting the interaction request
- if the interaction request is declined then do nothing
*/

- getX, getY, getNode, and getDiamondCount are more for debugging since they
	don't check to see if the player is online

/* Client2ServerPacketFlags
0x01 = login
0x02 = logout
0x03 = getX
0x04 = getY
0x05 = getNode
0x06 = getDiamondCount
0x07 = moveUp
0x08 = moveDown
0x09 = moveLeft
0x0A = moveRight
0x0B = getPlayersOnNode
0x0C = replyToPingWithPong
0x0D = requestSpriteIdOnNode
*/

/* ServerPacketFlags
0x01 = incorrectPassword
0x02 = accountInUse
0x03 = loginSuccess
0x04 = newPlayerConnection
0x05 = playerDisconnect
0x06 = playerMoveUp
0x07 = playerMoveDown
0x08 = playerMoveLeft
0x09 = playerMoveRight
0x0A = pingPlayer
0x0B = spriteIdForNode

// reserved for client side flags
0x00 = waitingForServer
0xFF = clientInitPacket
*/

- accept and decline are sent back to the server but never out to other players
- the password acts as a key which allows to server to process requests to
	change player state. if the passwords don't match then the request is
	declined

% === %

- need a better way to handle many clients on the server server side
- the server should be able to quickly identify whether an IPaddress is
	connected
- should be able to quickly search a node for a paritular player
- I could store the player's IP and port within the database when a player
	connects and when I need the player's information just build a struct
	with calls to the database
- also, if I needed an array of all the players on a node I could build this
	from the database calls and return it
- should have SQL calls like:

/*
// maintain a one-to-one with Players table
struct Player {
	uint32_t x;
	uint32_t y;
	uint32_t id;
	uint32_t host;
	uint16_t port;
	uint32_t node;
	char *username;
	char *password;
	uint32_t state;
	uint32_t count;
};

struct Player player = {};

player.host = ip.host;
player.port = ip.port;
player.username = username;
player.password = password;

retCode = playerLogin(player);
*/

- this will use the information filled in to set the player to an online state
	and fill in the rest of the information in the player structure
- the players which are currently online will be stored in a client pool
- each player structure is 32 bytes in length
- if the player max is 2048 then the pool is 65535 (64 kilobytes)
- 2048 total max players, which many by split over 64 nodes leaves 32 players
	per node maximum

/*
#define NODE_MAX 64
#define PLAYER_MAX 32

struct Player players[NODE_MAX][PLAYER_MAX];    // 64 kilobytes
SDL_bool playerIndexMask[NODE_MAX][PLAYER_MAX]; //  8 kilobytes

int getFreePlayerIndex(uint32_t node) {
	if(node>=NODE_MAX||node<0) return -2;

	int i;
	for(i=0; i<PLAYER_MAX; i++) {
		if(!playerIndexMask[node][i]) return i;
	}
	
	return -1;
}
*/

- this is nice because the most I'll have to iternate over is 32 because each
	node helps to break up the player base
- if a player attempts to connect to a node which is full they will be put in
	a queue

% === %

- once the player gets all the players that are online
- it should send out the grid of indices for the sprites
- a nodeGrid is 300 bytes, more than I really want to send out at once so
	instead I could have to client send out a request packet (flag, node,
	x, y) 13 bytes and get back (flag, spriteID, x, y) 13 bytes. this might
	fix the size sent at once but now 3900 (13 times) as much memory needs to
	be sent out
- i could get rid of the flag out for the server (just have the player wait
	like when they get all the player information)
- but then I'd have to send it all out at once in a for-loop and that defeats
	the point.
- so instead have it on a call-by-call basis and just keep the flag
- I might also want to do it this way for the players being sent to a new
	connection
- no need to send the node from the client side because the server knows it
- sending all 301 bytes is WAY faster then sending one by one

% === %

- move the player into where they are suppose to be but never use client-side
	logic to set the actually location. client is used to make it look smooth
